/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IAccountSignerMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlyUint8Array,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from '@solana/web3.js';
import { WEN_NEW_STANDARD_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type ResizeGroupInstruction<
  TProgram extends string = typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountGroup extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountGroup extends string
        ? WritableAccount<TAccountGroup>
        : TAccountGroup,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ResizeGroupInstructionData = { discriminator: ReadonlyUint8Array };

export type ResizeGroupInstructionDataArgs = {};

export function getResizeGroupInstructionDataEncoder(): Encoder<ResizeGroupInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([57, 175, 155, 98, 160, 54, 88, 105]),
    })
  );
}

export function getResizeGroupInstructionDataDecoder(): Decoder<ResizeGroupInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getResizeGroupInstructionDataCodec(): Codec<
  ResizeGroupInstructionDataArgs,
  ResizeGroupInstructionData
> {
  return combineCodec(
    getResizeGroupInstructionDataEncoder(),
    getResizeGroupInstructionDataDecoder()
  );
}

export type ResizeGroupInput<
  TAccountPayer extends string = string,
  TAccountGroup extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  payer: TransactionSigner<TAccountPayer>;
  group: Address<TAccountGroup>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getResizeGroupInstruction<
  TAccountPayer extends string,
  TAccountGroup extends string,
  TAccountSystemProgram extends string,
>(
  input: ResizeGroupInput<TAccountPayer, TAccountGroup, TAccountSystemProgram>
): ResizeGroupInstruction<
  typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountPayer,
  TAccountGroup,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = WEN_NEW_STANDARD_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    group: { value: input.group ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.group),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getResizeGroupInstructionDataEncoder().encode({}),
  } as ResizeGroupInstruction<
    typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
    TAccountPayer,
    TAccountGroup,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedResizeGroupInstruction<
  TProgram extends string = typeof WEN_NEW_STANDARD_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    payer: TAccountMetas[0];
    group: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: ResizeGroupInstructionData;
};

export function parseResizeGroupInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedResizeGroupInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      group: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getResizeGroupInstructionDataDecoder().decode(instruction.data),
  };
}
